// import { Component, OnInit } from '@angular/core';
// import { Router } from '@angular/router';
// import { DisplayUserService } from '../../services/display-user/display-user.service';
// import { User } from '../../models/User';

// @Component({
//   selector: 'app-display-users',
//   standalone: true,
//   imports: [],
//   templateUrl: './display-users.component.html',
//   styleUrl: './display-users.component.css'
// })
// export class DisplayUsersComponent implements OnInit {
//   constructor(private displayUser: DisplayUserService,private router: Router) { }
//   users$ = this.displayUser.users;
//   addFlag: boolean = false;
//   ngOnInit() {
//     this.displayUser.getUsers();
//   }

//   addUser(user: User) {
//     if(user!=null)
//       this.displayUser.addUser(user);
//     this.addFlag=false;
//   }

//   deleteUser(id: number) {
//     this.displayUser.deleteUser(id);
//   }
// }

// display-users.component.ts
import { Component,  OnInit } from "@angular/core"
import  { Router } from "@angular/router"
import  { DisplayUserService } from "../../services/display-user/display-user.service"
import  { User } from "../../models/User"
import { CommonModule } from "@angular/common"
import { FormsModule, ReactiveFormsModule } from "@angular/forms"
import { FormBuilder,  FormGroup, Validators } from "@angular/forms"

@Component({
  selector: "app-display-users",
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule],
  templateUrl: "./display-users.component.html",
  styleUrl: "./display-users.component.css",
})
export class DisplayUsersComponent implements OnInit {
  userForm!: FormGroup

  constructor(
    private displayUser: DisplayUserService,
    private router: Router,
    private fb: FormBuilder,
  ) {}

  users$ = this.displayUser.users
  addFlag = false
  searchTerm = ""
  sortBy = "userName"
  sortDirection: "asc" | "desc" = "asc"
  showConfirmDialog = false
  userToDelete:number|null = null

  ngOnInit() {
    this.displayUser.getUsers()
    this.users$ = this.displayUser.users
    this.initForm()
  }

  initForm() {
    this.userForm = this.fb.group({
      userName: ["", [Validators.required]],
      email: ["", [Validators.required, Validators.email]],
      password: ["", [Validators.required, Validators.minLength(6)]],
    })
  }

  addUser(user: User) {
    if (user != null) this.displayUser.addUser(user)
    this.addFlag = false
  }

  // deleteUser(id: number) {
  //   if (confirm("האם אתה בטוח שברצונך למחוק משתמש זה?")) {
  //     this.displayUser.deleteUser(id)
  //   }
  // }

  deleteUser(id: number): void {
    this.userToDelete = id
    this.showConfirmDialog = true
  }

  confirmDelete(): void {
    if (this.userToDelete !== null) {
      this.displayUser.deleteUser(this.userToDelete)
      this.cancelDelete()
    }
  }

  cancelDelete(): void {
    this.userToDelete = null
    this.showConfirmDialog = false
  }

  toggleAddForm() {
    this.addFlag = !this.addFlag
    if (this.addFlag) {
      this.initForm()
    }
  }

  closeDialogOnOverlay(event: MouseEvent) {
    if ((event.target as HTMLElement).classList.contains("dialog-overlay")) {
      this.toggleAddForm()
    }
  }

  submitForm() {
    if (this.userForm.valid) {
      const newUser = {
        ...this.userForm.value,
        id: Date.now(), // Temporary ID, should be generated by backend
        create_at: new Date().toISOString(),
        pathProfile: "", // Set empty profile image
        songs: [],
        followers: [],
      }
      this.addUser(newUser)
      this.userForm.reset()
    } else {
      // Mark all fields as touched to trigger validation
      Object.keys(this.userForm.controls).forEach((key) => {
        this.userForm.get(key)?.markAsTouched()
      })
    }
  }

  sortUsers(field: string) {
    if (this.sortBy === field) {
      this.sortDirection = this.sortDirection === "asc" ? "desc" : "asc"
    } else {
      this.sortBy = field
      this.sortDirection = "asc"
    }
  }

  get filteredUsers() {
    let users: User[] = []
    this.users$.subscribe((data) => {
      users = [...data]
    })

    // Filter by search term
    if (this.searchTerm) {
      const searchLower = this.searchTerm.toLowerCase()
      users = users.filter(
        (user) => user.userName.toLowerCase().includes(searchLower) || user.email.toLowerCase().includes(searchLower),
      )
    }

    // Sort users
    users.sort((a, b) => {
      let comparison = 0

      switch (this.sortBy) {
        case "userName":
          comparison = a.userName.localeCompare(b.userName)
          break
        case "email":
          comparison = a.email.localeCompare(b.email)
          break
        case "create_at":
          comparison = new Date(a.create_at).getTime() - new Date(b.create_at).getTime()
          break
        default:
          comparison = 0
      }

      return this.sortDirection === "asc" ? comparison : -comparison
    })

    return users
  }
}
